from typing import Any, Dict, List, Optional

from app.core.config import get_settings
from app.repositories.user_repo import load_user_config, load_avoid_list
from app.repositories.sheet_repo import load_shifts_for_user
from app.services.matching import find_overlaps, pick_my_rows
from app.services.line_client import send_message


def run_notify(user_id: Optional[str] = None) -> Dict[str, Any]:
    """通知処理（判定→送信）をひとまとまりで実行する（スタブ）。

    引数:
        user_id: 対象ユーザーのみ通知したい場合の識別子（未指定は既定のユーザー）

    戻り値:
        実行結果のサマリ（件数など）
    """
    settings = get_settings()

    # ユーザー設定/回避リスト/シフトを取得
    user_cfg = load_user_config(user_id)
    shifts: List[Dict[str, Any]] = load_shifts_for_user(user_id)
    my_slots = pick_my_rows(shifts, user_cfg.get("my_name", ""))
    targets = load_avoid_list(user_id)

    matches = find_overlaps(my_slots, shifts, targets)

    # 送信はヒット時のみ（現状はスタブで送信成否を返す想定）
    count = len(matches)
    if count > 0 and user_cfg.get("line_user_id"):
        send_message(user_cfg["line_user_id"], f"一致 {count} 件")

    return {"ok": True, "matched": count, "user": user_id}

